/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CarRentalV2 {
  export type TermsConfigStruct = {
    lateFeePerHour: BigNumberish;
    maxLateFeeMultiplier: BigNumberish;
    damageAssessmentPeriod: BigNumberish;
    violationPenaltyRate: BigNumberish;
  };

  export type TermsConfigStructOutput = [
    lateFeePerHour: bigint,
    maxLateFeeMultiplier: bigint,
    damageAssessmentPeriod: bigint,
    violationPenaltyRate: bigint
  ] & {
    lateFeePerHour: bigint;
    maxLateFeeMultiplier: bigint;
    damageAssessmentPeriod: bigint;
    violationPenaltyRate: bigint;
  };
}

export interface CarRentalV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelRental"
      | "chaindriveWallet"
      | "completeRentalByOwner"
      | "completeRentalByRenter"
      | "getBalance"
      | "getTermsAndConditions"
      | "getTermsConfig"
      | "initialize"
      | "initiateRental"
      | "rentals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RentalCancelled"
      | "RentalCompleted"
      | "RentalInitiated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chaindriveWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeRentalByOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRentalByRenter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTermsAndConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTermsConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRental",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chaindriveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRentalByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeRentalByRenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTermsAndConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTermsConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentals", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalCancelledEvent {
  export type InputTuple = [
    rentalId: BigNumberish,
    renter: AddressLike,
    owner: AddressLike
  ];
  export type OutputTuple = [rentalId: bigint, renter: string, owner: string];
  export interface OutputObject {
    rentalId: bigint;
    renter: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalCompletedEvent {
  export type InputTuple = [
    rentalId: BigNumberish,
    renter: AddressLike,
    owner: AddressLike
  ];
  export type OutputTuple = [rentalId: bigint, renter: string, owner: string];
  export interface OutputObject {
    rentalId: bigint;
    renter: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalInitiatedEvent {
  export type InputTuple = [
    rentalId: BigNumberish,
    renter: AddressLike,
    owner: AddressLike,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [
    rentalId: bigint,
    renter: string,
    owner: string,
    totalAmount: bigint
  ];
  export interface OutputObject {
    rentalId: bigint;
    renter: string;
    owner: string;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarRentalV2 extends BaseContract {
  connect(runner?: ContractRunner | null): CarRentalV2;
  waitForDeployment(): Promise<this>;

  interface: CarRentalV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelRental: TypedContractMethod<
    [rentalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  chaindriveWallet: TypedContractMethod<[], [string], "view">;

  completeRentalByOwner: TypedContractMethod<
    [rentalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeRentalByRenter: TypedContractMethod<
    [rentalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getTermsAndConditions: TypedContractMethod<[], [string], "view">;

  getTermsConfig: TypedContractMethod<
    [],
    [CarRentalV2.TermsConfigStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [_chaindriveWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  initiateRental: TypedContractMethod<
    [
      id: BigNumberish,
      owner: AddressLike,
      rentalFee: BigNumberish,
      securityDeposit: BigNumberish,
      platformFee: BigNumberish
    ],
    [void],
    "payable"
  >;

  rentals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        renter: string;
        owner: string;
        rentalFee: bigint;
        securityDeposit: bigint;
        platformFee: bigint;
        renterConfirmed: boolean;
        ownerConfirmed: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelRental"
  ): TypedContractMethod<[rentalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chaindriveWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "completeRentalByOwner"
  ): TypedContractMethod<[rentalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeRentalByRenter"
  ): TypedContractMethod<[rentalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTermsAndConditions"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTermsConfig"
  ): TypedContractMethod<[], [CarRentalV2.TermsConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_chaindriveWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initiateRental"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      owner: AddressLike,
      rentalFee: BigNumberish,
      securityDeposit: BigNumberish,
      platformFee: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rentals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        id: bigint;
        renter: string;
        owner: string;
        rentalFee: bigint;
        securityDeposit: bigint;
        platformFee: bigint;
        renterConfirmed: boolean;
        ownerConfirmed: boolean;
        isCompleted: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RentalCancelled"
  ): TypedContractEvent<
    RentalCancelledEvent.InputTuple,
    RentalCancelledEvent.OutputTuple,
    RentalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "RentalCompleted"
  ): TypedContractEvent<
    RentalCompletedEvent.InputTuple,
    RentalCompletedEvent.OutputTuple,
    RentalCompletedEvent.OutputObject
  >;
  getEvent(
    key: "RentalInitiated"
  ): TypedContractEvent<
    RentalInitiatedEvent.InputTuple,
    RentalInitiatedEvent.OutputTuple,
    RentalInitiatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RentalCancelled(uint256,address,address)": TypedContractEvent<
      RentalCancelledEvent.InputTuple,
      RentalCancelledEvent.OutputTuple,
      RentalCancelledEvent.OutputObject
    >;
    RentalCancelled: TypedContractEvent<
      RentalCancelledEvent.InputTuple,
      RentalCancelledEvent.OutputTuple,
      RentalCancelledEvent.OutputObject
    >;

    "RentalCompleted(uint256,address,address)": TypedContractEvent<
      RentalCompletedEvent.InputTuple,
      RentalCompletedEvent.OutputTuple,
      RentalCompletedEvent.OutputObject
    >;
    RentalCompleted: TypedContractEvent<
      RentalCompletedEvent.InputTuple,
      RentalCompletedEvent.OutputTuple,
      RentalCompletedEvent.OutputObject
    >;

    "RentalInitiated(uint256,address,address,uint256)": TypedContractEvent<
      RentalInitiatedEvent.InputTuple,
      RentalInitiatedEvent.OutputTuple,
      RentalInitiatedEvent.OutputObject
    >;
    RentalInitiated: TypedContractEvent<
      RentalInitiatedEvent.InputTuple,
      RentalInitiatedEvent.OutputTuple,
      RentalInitiatedEvent.OutputObject
    >;
  };
}
